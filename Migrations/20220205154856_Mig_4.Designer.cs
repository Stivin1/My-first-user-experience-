// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenSourceEnity.Models.ContextDb;

namespace OpenSourceEnity.Migrations
{
    [DbContext(typeof(ApplicationEnityContextdb))]
    [Migration("20220205154856_Mig_4")]
    partial class Mig_4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.AggreagateLogEntities.Entities.Logging", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DateCreate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LoggingInformationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("LoggingInformationId");

                    b.HasIndex("UserId");

                    b.ToTable("Loggings");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.AddresseeMessage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("AddresseeMessages");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Country", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Name = "Россия"
                        },
                        new
                        {
                            id = 2,
                            Name = "Англия"
                        });
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Domain", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Domens");

                    b.HasData(
                        new
                        {
                            Id = "3bbdb487-599b-4457-ac65-fae30e8ff437",
                            Name = "@bk.ru"
                        },
                        new
                        {
                            Id = "2e208829-8a25-4265-81f2-79afaba9f16d",
                            Name = "@bk.com"
                        });
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.LoggingInformation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("LoggingInformation");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Name = "Попытка входа"
                        },
                        new
                        {
                            id = 2,
                            Name = "Просмот главной страниц"
                        },
                        new
                        {
                            id = 3,
                            Name = "Просмотр пользователей"
                        },
                        new
                        {
                            id = 4,
                            Name = "Просмотр страницы обновления данных участника"
                        },
                        new
                        {
                            id = 5,
                            Name = "Обновление данных участника"
                        },
                        new
                        {
                            id = 6,
                            Name = "Просмотр страницы обновления данных пользователя"
                        },
                        new
                        {
                            id = 7,
                            Name = "Обновление данных пользователя"
                        },
                        new
                        {
                            id = 8,
                            Name = "Просмотр страница добавления роли"
                        },
                        new
                        {
                            id = 9,
                            Name = "Добавление роли"
                        },
                        new
                        {
                            id = 10,
                            Name = "Просмотр страница добавления роли пользователю"
                        },
                        new
                        {
                            id = 11,
                            Name = "Добавление роли пользователю"
                        },
                        new
                        {
                            id = 12,
                            Name = "Просмотр страницы добавления группы"
                        },
                        new
                        {
                            id = 13,
                            Name = "Добавление группы"
                        },
                        new
                        {
                            id = 14,
                            Name = "Просмотр страницы добавления группы пользователю"
                        },
                        new
                        {
                            id = 15,
                            Name = "Добавление группы пользователю"
                        },
                        new
                        {
                            id = 16,
                            Name = "Просмотр страницы списка пользователей для отправки сообщения"
                        },
                        new
                        {
                            id = 17,
                            Name = "Просмотр страницы отправки сообщения"
                        },
                        new
                        {
                            id = 18,
                            Name = "Просмотр страницы полученных сообщений"
                        },
                        new
                        {
                            id = 19,
                            Name = "Открытие сообщения"
                        });
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Message", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ThemeMessageId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ThemeMessageId")
                        .IsUnique();

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Participant", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DateAge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PolId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PolId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Participant_AUD", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DateAge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PolId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("PolId");

                    b.HasIndex("UserId");

                    b.ToTable("Participant_AUDs");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Pol", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("id");

                    b.ToTable("Pols");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Name = "Мужчина"
                        },
                        new
                        {
                            id = 2,
                            Name = "Женщина"
                        });
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Team", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.ThemeMessage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Theme")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("ThemeMessages");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateChanges")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DateCreate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DomainId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<int>("Teamsid")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Teamsid", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TeamUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.AggreagateLogEntities.Entities.Logging", b =>
                {
                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.LoggingInformation", "loggingInformation")
                        .WithMany("loggings")
                        .HasForeignKey("LoggingInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.User", "User")
                        .WithMany("Loggings")
                        .HasForeignKey("UserId");

                    b.Navigation("loggingInformation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.AddresseeMessage", b =>
                {
                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.Message", "Message")
                        .WithMany("addresseeMessages")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.User", "User")
                        .WithMany("AddresseeMessage")
                        .HasForeignKey("UserId");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Message", b =>
                {
                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.ThemeMessage", "ThemeMessage")
                        .WithOne("Message")
                        .HasForeignKey("OpenSourceEnity.Models.Entities.SystemEntities.Message", "ThemeMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThemeMessage");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Participant", b =>
                {
                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.Country", "Country")
                        .WithMany("Participant")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.Pol", "Pol")
                        .WithMany("Participant")
                        .HasForeignKey("PolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.User", "User")
                        .WithOne("Participant")
                        .HasForeignKey("OpenSourceEnity.Models.Entities.SystemEntities.Participant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Country");

                    b.Navigation("Pol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Participant_AUD", b =>
                {
                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.Participant", "Participant")
                        .WithMany("Participant_AUD")
                        .HasForeignKey("ParticipantId");

                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.Pol", "Pol")
                        .WithMany()
                        .HasForeignKey("PolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Country");

                    b.Navigation("Participant");

                    b.Navigation("Pol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.User", b =>
                {
                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.Domain", "Domain")
                        .WithMany("Users")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.Team", null)
                        .WithMany()
                        .HasForeignKey("Teamsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenSourceEnity.Models.Entities.SystemEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Country", b =>
                {
                    b.Navigation("Participant");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Domain", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.LoggingInformation", b =>
                {
                    b.Navigation("loggings");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Message", b =>
                {
                    b.Navigation("addresseeMessages");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Participant", b =>
                {
                    b.Navigation("Participant_AUD");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.Pol", b =>
                {
                    b.Navigation("Participant");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.ThemeMessage", b =>
                {
                    b.Navigation("Message");
                });

            modelBuilder.Entity("OpenSourceEnity.Models.Entities.SystemEntities.User", b =>
                {
                    b.Navigation("AddresseeMessage");

                    b.Navigation("Loggings");

                    b.Navigation("Participant");
                });
#pragma warning restore 612, 618
        }
    }
}
